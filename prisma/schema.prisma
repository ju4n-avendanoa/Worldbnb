generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  password      String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  places        Places[] 
  reservations  Reservation[]
}

model VerificationToken {
  identifier String   @id @default(auto()) @map("_id") @db.ObjectId
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Places {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  userId          String @db.ObjectId
  title           String
  address         String
  description     String
  extraInfo       String
  price           Int
  country         String
  currency        String
  checkIn         Int
  checkOut        Int
  maxGuests       Int
  photos          Photos[]
  perks           Perks[]
  reservations    Reservation[]
  user            User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
}

model Photos {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  url            String
  placeId        String @db.ObjectId
  photoId        String @unique
  places         Places @relation(fields: [placeId], references: [id], onDelete: Cascade)
}

model Perks {
  id               String @id @default(auto()) @map("_id") @db.ObjectId
  placeId          String @unique @db.ObjectId
  wifi             Boolean
  pet              Boolean
  parking          Boolean
  tv               Boolean
  privateEntrance  Boolean
  kitchen          Boolean
  washer           Boolean
  pool             Boolean
  airConditioner   Boolean
  breakfast        Boolean
  gym              Boolean
  cleaningService  Boolean
  places           Places @relation(fields: [placeId], references: [id], onDelete: Cascade)
}

model Reservation {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  userId          String @db.ObjectId
  placeId       String @db.ObjectId  
  startDate       DateTime
  endDate         DateTime
  totalPrice      Int
  createdAt       DateTime @default(now())

  user            User @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing         Places @relation(fields: [placeId], references: [id], onDelete: Cascade)
}